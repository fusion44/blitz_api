{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "1"
  },
  "paths": {
    "/apps/status": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get the status available apps.",
        "operationId": "apps_status_apps_status_get",
        "responses": {
          "200": {
            "description": "\nReturns a JSON list with the current status of all **installed** apps\n```\n[\n    {\n        id: 'specter',\n        name: 'Specter Desktop',\n        status: 'online'\n    },\n    {\n        id: 'sphinx',\n        name: 'Sphinx Chat',\n        status: 'online'\n    },\n   ...\n]\n```\n",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/apps/status/{id}": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get the status of a single app by id.",
        "operationId": "apps_status_apps_status__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/apps/status-sub": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Subscribe to status changes of currently installed apps.",
        "operationId": "apps_status_sub_apps_status_sub_get",
        "responses": {
          "200": {
            "description": "\nSends a JSON object with the status of an app if it changes.\n```\n{\n    id: 'specter',\n    name: 'Specter Desktop',\n    status: 'online'\n},\n```\n",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/apps/install/{name}": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Install app",
        "operationId": "apps_install_apps_install__name__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/apps/uninstall/{name}": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Uninstall app",
        "operationId": "apps_install_apps_uninstall__name__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninstallData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/btc-info": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Bitcoin.Btc-Info",
        "description": "Get general information about bitcoin core. Combines most important information from `getblockchaininfo` and `getnetworkinfo`",
        "operationId": "bitcoin_btc_info_bitcoin_btc_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BtcInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/get-block-count": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Get the current block count",
        "description": "See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/blockchain/getblockcount/)",
        "operationId": "bitcoin_get_block_count_bitcoin_get_block_count_get",
        "responses": {
          "200": {
            "description": "A JSON String with relevant information.\n\n```json\n{\n  \"result\": 682621,\n  \"error\": null,\n  \"id\": 0\n}\n",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/get-blockchain-info": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Get the current blockchain status",
        "description": "See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/blockchain/getblockchaininfo/)",
        "operationId": "bitcoin_get_blockchain_info_bitcoin_get_blockchain_info_get",
        "responses": {
          "200": {
            "description": "A JSON String with relevant information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockchainInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/estimate-fee": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Get current fee estimation from Bitcoin Core",
        "description": "Estimates the fee for the given parameters.\n    See documentation on [bitcoin.org](https://developer.bitcoin.org/reference/rpc/estimatesmartfee.html)",
        "operationId": "bitcoin_estimate_fee_bitcoin_estimate_fee_get",
        "parameters": [
          {
            "description": "Confirmation target in blocks.",
            "required": false,
            "schema": {
              "title": "Target Conf",
              "type": "integer",
              "description": "Confirmation target in blocks.",
              "default": 6
            },
            "name": "target_conf",
            "in": "query"
          },
          {
            "description": "Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FeeEstimationMode"
                }
              ],
              "description": "Whether to return a more conservative estimate which also satisfies a longer history. A conservative estimate potentially returns a higher feerate and is more likely to be sufficient for the desired target, but is not as responsive to short term drops in the prevailing fee market.",
              "default": "conservative"
            },
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The estimated fee in satoshis",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bitcoin Estimate Fee Bitcoin Estimate Fee Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/get-network-info": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Get information about the network",
        "description": "See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/0.21.0/rpc/network/getnetworkinfo/)",
        "operationId": "bitcoin_get_network_info_bitcoin_get_network_info_get",
        "responses": {
          "200": {
            "description": "A JSON String with relevant information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/get-raw-transaction": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Get information about a raw transaction",
        "description": "See documentation on [bitcoincore.org](https://bitcoincore.org/en/doc/22.0.0/rpc/rawtransactions/getrawtransaction/)",
        "operationId": "bitcoin_get_raw_transaction_bitcoin_get_raw_transaction_get",
        "parameters": [
          {
            "description": "The transaction id",
            "required": true,
            "schema": {
              "title": "Txid",
              "maxLength": 64,
              "minLength": 64,
              "type": "string",
              "description": "The transaction id"
            },
            "name": "txid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON String with relevant information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid transaction id"
          },
          "404": {
            "description": "No such mempool or blockchain transaction."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/bitcoin/block-sub": {
      "get": {
        "tags": [
          "Bitcoin Core"
        ],
        "summary": "Subscribe to incoming blocks.",
        "description": "Similar to Bitcoin Core getblock\n\nSSE endpoint to receive new block information as soon as it is appended to chain.\n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br>\nIf verbosity is 1, returns an Object with information about block <hash>.<br>\nIf verbosity is 2, returns an Object with information about block <hash> and information about each transaction.<br>",
        "operationId": "bitcoin_block_sub_bitcoin_block_sub_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Verbosity",
              "type": "integer",
              "default": 1
            },
            "name": "verbosity",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with information about the new block.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/add-invoice": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Addinvoice adds a new Invoice to the database.",
        "description": "For additional information see [LND docs](https://api.lightning.community/#addinvoice)",
        "operationId": "lightning_add_invoice_lightning_add_invoice_post",
        "parameters": [
          {
            "description": "The amount of msat of the invoice",
            "required": true,
            "schema": {
              "title": "Value Msat",
              "minimum": 0.0,
              "type": "integer",
              "description": "The amount of msat of the invoice"
            },
            "name": "value_msat",
            "in": "query"
          },
          {
            "description": "The memo of the invoice",
            "required": false,
            "schema": {
              "title": "Memo",
              "type": "string",
              "description": "The memo of the invoice",
              "default": ""
            },
            "name": "memo",
            "in": "query"
          },
          {
            "description": "Expiry time in seconds",
            "required": false,
            "schema": {
              "title": "Expiry",
              "type": "integer",
              "description": "Expiry time in seconds",
              "default": 3600
            },
            "name": "expiry",
            "in": "query"
          },
          {
            "description": "LND only: Whether this invoice is a keysend invoice.",
            "required": false,
            "schema": {
              "title": "Is Keysend",
              "type": "boolean",
              "description": "LND only: Whether this invoice is a keysend invoice.",
              "default": false
            },
            "name": "is_keysend",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/get-balance": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Get the current on chain and channel balances of the lighting wallet.",
        "operationId": "lightning_get_balance_lightning_get_balance_get",
        "responses": {
          "200": {
            "description": "\nA JSON String with on chain wallet balances with on-chain balances in\n**sat** and channel balances in **msat**. Detailed description is in\nthe schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalance"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/get-fee-revenue": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Returns the daily, weekly and monthly fee revenue earned.",
        "description": "Currently, year and total fees are always null. Backends don't return these values by default.\nImplementation in BlitzAPI is a [to-do](https://github.com/fusion44/blitz_api/issues/64).",
        "operationId": "lightning_get_fee_revenue_lightning_get_fee_revenue_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeRevenue"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/list-all-tx": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Lists all on-chain transactions, payments and invoices in the wallet",
        "description": "Returns a list with all on-chain transaction, payments and invoices combined into one list.\n    The index of each tx is only valid for each identical set of parameters.",
        "operationId": "lightning_list_all_tx_lightning_list_all_tx_get",
        "parameters": [
          {
            "description": "If set, only successful transaction will be returned in the response.",
            "required": false,
            "schema": {
              "title": "Successful Only",
              "type": "boolean",
              "description": "If set, only successful transaction will be returned in the response.",
              "default": false
            },
            "name": "successful_only",
            "in": "query"
          },
          {
            "description": "The index of an transaction that will be used as either the start or end of a query to determine which invoices should be returned in the response.",
            "required": false,
            "schema": {
              "title": "Index Offset",
              "type": "integer",
              "description": "The index of an transaction that will be used as either the start or end of a query to determine which invoices should be returned in the response.",
              "default": 0
            },
            "name": "index_offset",
            "in": "query"
          },
          {
            "description": "The max number of transaction to return in the response to this query. Will return all transactions when set to 0 or null.",
            "required": false,
            "schema": {
              "title": "Max Tx",
              "type": "integer",
              "description": "The max number of transaction to return in the response to this query. Will return all transactions when set to 0 or null.",
              "default": 0
            },
            "name": "max_tx",
            "in": "query"
          },
          {
            "description": "If set, the transactions returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards.",
            "required": false,
            "schema": {
              "title": "Reversed",
              "type": "boolean",
              "description": "If set, the transactions returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards.",
              "default": false
            },
            "name": "reversed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning List All Tx Lightning List All Tx Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericTx"
                  }
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/list-invoices": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Lists all invoices from the wallet. Modeled after LND implementation.",
        "operationId": "lightning_list_invoices_lightning_list_invoices_get",
        "parameters": [
          {
            "description": "If set, only invoices that are not settled and not canceled will be returned in the response.",
            "required": false,
            "schema": {
              "title": "Pending Only",
              "type": "boolean",
              "description": "If set, only invoices that are not settled and not canceled will be returned in the response.",
              "default": false
            },
            "name": "pending_only",
            "in": "query"
          },
          {
            "description": "The index of an invoice that will be used as either the start or end of a query to determine which invoices should be returned in the response.",
            "required": false,
            "schema": {
              "title": "Index Offset",
              "type": "integer",
              "description": "The index of an invoice that will be used as either the start or end of a query to determine which invoices should be returned in the response.",
              "default": 0
            },
            "name": "index_offset",
            "in": "query"
          },
          {
            "description": "The max number of invoices to return in the response to this query. Will return all invoices when set to 0 or null.",
            "required": false,
            "schema": {
              "title": "Num Max Invoices",
              "type": "integer",
              "description": "The max number of invoices to return in the response to this query. Will return all invoices when set to 0 or null.",
              "default": 0
            },
            "name": "num_max_invoices",
            "in": "query"
          },
          {
            "description": "If set, the invoices returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards.",
            "required": false,
            "schema": {
              "title": "Reversed",
              "type": "boolean",
              "description": "If set, the invoices returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards.",
              "default": false
            },
            "name": "reversed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all invoices created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning List Invoices Lightning List Invoices Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/list-onchain-tx": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Lists all onchain transactions from the wallet",
        "operationId": "lightning_list_onchain_tx_lightning_list_onchain_tx_get",
        "responses": {
          "200": {
            "description": "A list of all on-chain transactions made.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning List Onchain Tx Lightning List Onchain Tx Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnChainTransaction"
                  }
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/list-payments": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Returns a list of all outgoing payments. Modeled after LND implementation.",
        "operationId": "lightning_list_payments_lightning_list_payments_get",
        "parameters": [
          {
            "description": "If true, then return payments that have not yet fully completed. This means that pending payments, as well as failed payments will show up if this field is set to true. This flag doesn't change the meaning of the indices, which are tied to individual payments.",
            "required": false,
            "schema": {
              "title": "Include Incomplete",
              "type": "boolean",
              "description": "If true, then return payments that have not yet fully completed. This means that pending payments, as well as failed payments will show up if this field is set to true. This flag doesn't change the meaning of the indices, which are tied to individual payments.",
              "default": true
            },
            "name": "include_incomplete",
            "in": "query"
          },
          {
            "description": "The index of a payment that will be used as either the start or end of a query to determine which payments should be returned in the response. The index_offset is exclusive. In the case of a zero index_offset, the query will start with the oldest payment when paginating forwards, or will end with the most recent payment when paginating backwards.",
            "required": false,
            "schema": {
              "title": "Index Offset",
              "type": "integer",
              "description": "The index of a payment that will be used as either the start or end of a query to determine which payments should be returned in the response. The index_offset is exclusive. In the case of a zero index_offset, the query will start with the oldest payment when paginating forwards, or will end with the most recent payment when paginating backwards.",
              "default": 0
            },
            "name": "index_offset",
            "in": "query"
          },
          {
            "description": "The maximal number of payments returned in the response to this query.",
            "required": false,
            "schema": {
              "title": "Max Payments",
              "type": "integer",
              "description": "The maximal number of payments returned in the response to this query.",
              "default": 0
            },
            "name": "max_payments",
            "in": "query"
          },
          {
            "description": "If set, the payments returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards. The order of the returned payments is always oldest first (ascending index order).",
            "required": false,
            "schema": {
              "title": "Reversed",
              "type": "boolean",
              "description": "If set, the payments returned will result from seeking backwards from the specified index offset. This can be used to paginate backwards. The order of the returned payments is always oldest first (ascending index order).",
              "default": false
            },
            "name": "reversed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all payments made.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning List Payments Lightning List Payments Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/new-address": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Generate a new on-chain address",
        "description": "Generate a wallet new address. Address-types has to be one of:\n* **p2wkh**:  Pay to witness key hash (bech32)\n* **np2wkh**: Pay to nested witness key hash",
        "operationId": "lightning_new_address_lightning_new_address_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAddressInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly generated wallet address",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning New Address Lightning New Address Post",
                  "type": "string"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/send-coins": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Attempt to send on-chain funds.",
        "description": "__send-coins__ executes a request to send coins to a particular address.\n\n### LND:\nIf neither __target_conf__, or __sat_per_vbyte__ are set, then the internal wallet will consult its fee model to determine a fee for the default confirmation target.\n\n> \ud83d\udc49 See [https://api.lightning.community/?shell#sendcoins](https://api.lightning.community/?shell#sendcoins)\n\n### c-lightning:\n* Set __target_conf__ ==1: interpreted as urgent (aim for next block)\n* Set __target_conf__ >=2: interpreted as normal (next 4 blocks or so, **default**)\n* Set __target_cont__ >=10: interpreted as slow (next 100 blocks or so)\n* If __sat_per_vbyte__ is set then __target_conf__ is ignored and vbytes (sipabytes) will be used.\n\n> \ud83d\udc49 See [https://lightning.readthedocs.io/lightning-txprepare.7.html](https://lightning.readthedocs.io/lightning-txprepare.7.html)\n\n### Sending all onchain funds\n> \u2139\ufe0f Keep the following points in mind when sending all onchain funds:\n\n* If __send_all__ is set to __true__, the __amount__ field must be set to __0__.\n* If the __amount__ field is greater than __0__, the __send_all__ field must be __false__.\n  * The API will return an error if neither or both conditions are met at the same time.\n* If __send_all__ is set to __true__ the amount of satoshis to send will be calculated by subtracting the fee from the wallet balance.\n* If the wallet balance is not sufficient to cover the fee, the call will fail.\n* The call will __not__ close any channels.\n* The implementation may keep a reserve of funds if there are still open channels.",
        "operationId": "lightning_send_coins_lightning_send_coins_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCoinsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Either an error or a SendCoinsResponse object on success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendCoinsResponse"
                }
              }
            }
          },
          "412": {
            "description": "When not enough funds are available."
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/open-channel": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "open a new lightning channel",
        "description": "__open-channel__ attempts to open a channel with a peer.\n\n### LND:\n_target_conf_: The target number of blocks that the funding transaction should be confirmed by.\n\n### c-lightning:\n* Set _target_conf_ ==1: interpreted as urgent (aim for next block)\n* Set _target_conf_ >=2: interpreted as normal (next 4 blocks or so, **default**)\n* Set _target_cont_ >=10: interpreted as slow (next 100 blocks or so)\n\n> \ud83d\udc49 See [https://lightning.readthedocs.io/lightning-txprepare.7.html](https://lightning.readthedocs.io/lightning-txprepare.7.html)",
        "operationId": "lightning_open_channel_lightning_open_channel_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Local Funding Amount",
              "type": "integer"
            },
            "name": "local_funding_amount",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Node Uri",
              "type": "string"
            },
            "name": "node_URI",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target Confs",
              "type": "integer",
              "default": 3
            },
            "name": "target_confs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning Open Channel Lightning Open Channel Post",
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "description": "When not enough funds are available."
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "504": {
            "description": "When the peer is not reachable."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/list-channels": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Returns a list of open channels",
        "operationId": "lightning_list_channels_lightning_list_channels_get",
        "responses": {
          "200": {
            "description": "A list of all open channels.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning List Channels Lightning List Channels Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  }
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/close-channel": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "close a channel",
        "description": "For additional information see [LND docs](https://api.lightning.community/#closechannel)",
        "operationId": "lightning_close_channel_lightning_close_channel_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Channel Id",
              "type": "string"
            },
            "name": "channel_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Force Close",
              "type": "boolean"
            },
            "name": "force_close",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning Close Channel Lightning Close Channel Post",
                  "type": "string"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/send-payment": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Attempt to pay a payment request.",
        "description": "This endpoints attempts to pay a payment request.\n\nIntermediate status updates will be sent via the SSE channel. This endpoint returns the last success or error message from the node.",
        "operationId": "lightning_send_payment_lightning_send_payment_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Pay Req",
              "type": "string"
            },
            "name": "pay_req",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Timeout Seconds",
              "type": "integer",
              "default": 5
            },
            "name": "timeout_seconds",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Fee Limit Msat",
              "type": "integer",
              "default": 8000
            },
            "name": "fee_limit_msat",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Amount Msat",
              "type": "integer"
            },
            "name": "amount_msat",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Either an error or a Payment object on success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "\nPossible error messages:\n* invalid bech32 string\n* amount must be specified when paying a zero amount invoice\n* amount must not be specified when paying a non-zero amount invoice\n"
          },
          "409": {
            "description": "[LND only] When attempting to pay an already paid invoice. CLN will return the payment object of the previously paid invoice. Info: [GitHub](https://github.com/fusion44/blitz_api/issues/131)"
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/get-info": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Request information about the currently running lightning node.",
        "operationId": "lightning_get_info_lightning_get_info_get",
        "responses": {
          "200": {
            "description": "Either an error or a LnInfo object on success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LnInfo"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/get-info-lite": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Get lightweight current lightning info. Less verbose version of /lightning/get-info",
        "operationId": "lightning_get_info_lite_lightning_get_info_lite_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningInfoLite"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/decode-pay-req": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "DecodePayReq takes an encoded payment request string and attempts to decode it, returning a full description of the conditions encoded within the payment request.",
        "operationId": "lightning_decode_pay_req_lightning_decode_pay_req_get",
        "parameters": [
          {
            "description": "The payment request string to be decoded",
            "required": true,
            "schema": {
              "title": "Pay Req",
              "type": "string",
              "description": "The payment request string to be decoded"
            },
            "name": "pay_req",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A fully decoded payment request or a HTTP status 400 if the payment request cannot be decoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            }
          },
          "423": {
            "description": "LND only: Wallet is locked. Unlock via /lightning/unlock-wallet."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/lightning/unlock-wallet": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Unlocks a locked wallet.",
        "operationId": "lightning_unlock_wallet_lightning_unlock_wallet_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockWalletInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "\n`True` if ok, `False` otherwise\n\n### LND:\nThis call will wait until the LND daemon is fully ready to accept calls. Internally it'll call GetInfo every\n0.1 seconds and returns True for the first successful call.\n\n> \u2139\ufe0f _After the unlock the LND-gRPC server takes a bit of time to boot up._\n\n### Core Lightning:\n\n> \u2139\ufe0f _Platform: Native_ CLN doesn't support wallet locking and will return True immediately.\n\n> \u2139\ufe0f _Platform: RaspiBlitz_ RaspiBlitz has its own locking implementation on top of CLN. Will unlock and return True if successful. Might take a few seconds. If it takes longer than 60 seconds it'll return an error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Lightning Unlock Wallet Lightning Unlock Wallet Post",
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Either JWT token is not ok OR wallet password is wrong, observe the detail message."
          },
          "412": {
            "description": "Wallet already unlocked"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/login": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Logs the user in with the current password",
        "operationId": "system_login_system_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JWT token for the current session.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/system/refresh-token": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Endpoint to refresh an authentication token",
        "operationId": "system_refresh_token_system_refresh_token_post",
        "responses": {
          "200": {
            "description": "Returns a fresh JWT token.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/change-password": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Endpoint to change your password",
        "operationId": "system_change_password_system_change_password_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Old Password",
              "type": "string"
            },
            "name": "old_password",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "New Password",
              "type": "string"
            },
            "name": "new_password",
            "in": "query"
          },
          {
            "description": " \u2139\ufe0f Used in **RaspiBlitz only**. Password A, B or C. Must be one of `[\"a\", \"b\", \"c\"]`",
            "required": false,
            "schema": {
              "title": "Type",
              "type": "string",
              "description": " \u2139\ufe0f Used in **RaspiBlitz only**. Password A, B or C. Must be one of `[\"a\", \"b\", \"c\"]`"
            },
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "if 200 OK - password change worked",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/get-system-info": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get system status information",
        "operationId": "system_get_system_info_system_get_system_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          },
          "423": {
            "description": "Wallet is locked. Unlock via /lightning/unlock-wallet"
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/hardware-info": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get hardware status information.",
        "operationId": "system_hardware_info_system_hardware_info_get",
        "responses": {
          "200": {
            "description": "Returns a JSON string with hardware information:\n\n```JSON\n{\n  \"cpu_overall_percent\": 15.8,\n  \"cpu_per_cpu_percent\": [\n    11.8,\n    6.1,\n    12.5\n  ],\n  \"vram_total_bytes\": 25134919680,\n  \"vram_available_bytes\": 17240051712,\n  \"vram_used_bytes\": 6044856320,\n  \"vram_usage_percent\": 31.4,\n  \"swap_ram_total_bytes\": 2147479552,\n  \"swap_used_bytes\": 0,\n  \"swap_usage_bytes\": 0,\n  \"temperatures_celsius\": {\n    \"coretemp\": [\n      [\n        \"Core 1\",\n        51,\n        84,\n        100\n      ],\n      [\n        \"Core 2\",\n        53,\n        84,\n        100\n      ],\n      [\n        \"Core 3\",\n        50,\n        84,\n        100\n      ]\n    ]\n  },\n  \"boot_time_timestamp\": 1623486468,\n  \"disk_io_read_count\": 254574,\n  \"disk_io_write_count\": 133353,\n  \"disk_io_read_bytes\": 5306839040,\n  \"disk_io_write_bytes\": 5593076736,\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda1\",\n      \"mountpoint\": \"/boot/efi\",\n      \"filesystem_type\": \"vfat\",\n      \"partition_total_bytes\": 535805952,\n      \"partition_used_bytes\": 8228864,\n      \"partition_free_bytes\": 527577088,\n      \"partition_percent\": 1.5\n    },\n    {\n      \"device\": \"/dev/sda2\",\n      \"mountpoint\": \"/\",\n      \"filesystem_type\": \"ext4\",\n      \"partition_total_bytes\": 250438021120,\n      \"partition_used_bytes\": 177157742592,\n      \"partition_free_bytes\": 60487389184,\n      \"partition_percent\": 74.5\n    }\n  ],\n  \"networks\": [\n    {\n      \"interface_name\": \"lo\",\n      \"address\": \"127.0.0.1\",\n      \"mac_address\": \"00:00:00:00:00:00\"\n    },\n    {\n      \"interface_name\": \"enp4s0\",\n      \"address\": \"192.168.1.23\",\n      \"mac_address\": \"35:a3:5c:6a:4a:f0\"\n    }\n  ],\n  \"networks_bytes_sent\": 137088249,\n  \"networks_bytes_received\": 1603400654\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/connection-info": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get credential information to connect external apps.",
        "operationId": "system_connection_info_system_connection_info_get",
        "responses": {
          "200": {
            "description": "Returns a JSON string with credential information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/get-debug-logs-raw": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get raw system logs as a text string.",
        "description": "This endpoint will gather latest system logs and return it in a\nraw string. This endpoint will **not** return immediately because\nit gathers all data on time of the request.",
        "operationId": "system_get_debug_logs_raw_system_get_debug_logs_raw_get",
        "responses": {
          "200": {
            "description": "\nThe latest system log as a string of text.\n\nReturns a `HTTP_INTERNAL_SERVER_ERROR` with status code 500 if script execution fails on server.\n\nExample output in `raw_data`:\n\n```\n***************************************************************\n* RASPIBLITZ DEBUG LOGS\n***************************************************************\nblitzversion: 1.7.0\nchainnetwork: bitcoin / main\n 15:27:34 up  4:10,  3 users,  load average: 1.23, 1.36, 1.38\n\n*** BLOCKCHAIN SYSTEMD STATUS ***\n\u25cf bitcoind.service - Bitcoin daemon\n   Loaded: loaded (/etc/systemd/system/bitcoind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2021-09-14 11:16:51 BST; 4h 10min ago\n  Process: 1718 ExecStartPre=/home/admin/config.scripts/blitz.systemd.sh log blockchain STARTED (code=exited, status=0/SUCCESS)\n  Process: 1724 ExecStart=/usr/local/bin/bitcoind -daemon -conf=/home/bitcoin/.bitcoin/bitcoin.conf -pid=/mnt/hdd/bitcoin/bitcoind.pid (code=exited, status=0/SUCCESS)\n Main PID: 1765 (bitcoind)\n    Tasks: 12 (limit: 4533)\n   CGroup: /system.slice/bitcoind.service\n           \u2514\u25001765 /usr/local/bin/bitcoind -daemon -conf=/home/bitcoin/.bitcoin/bitcoin.conf -pid=/mnt/hdd/bitcoin/bitcoind.pid\n\nSep 14 11:16:50 raspberrypi systemd[1]: Starting Bitcoin daemon...\nSep 14 11:16:51 raspberrypi systemd[1]: Started Bitcoin daemon.\n\n*** LAST BLOCKCHAIN ERROR LOGS ***\nsudo journalctl -u bitcoind -b --no-pager -n8\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:35 BST. --\nSep 14 11:16:50 raspberrypi systemd[1]: Starting Bitcoin daemon...\nSep 14 11:16:51 raspberrypi systemd[1]: Started Bitcoin daemon.\n\n*** LAST BLOCKCHAIN 20 INFO LOGS ***\nsudo tail -n 20 /mnt/hdd/bitcoin/debug.log\n2021-09-14T14:26:27Z Rolling forward 00000000000000000082dcdfb99c8b663828fd40fd68f343a17f766e1dee9bdc (499641)\n2021-09-14T14:26:30Z Rolling forward 0000000000000000003c2cc296d753717135a38cfea6bc3ddba640aac063fb3b (499642)\n2021-09-14T14:26:34Z Rolling forward 00000000000000000005869d321a8f2046d1e47f55b97920c9e4bb8a971db40b (499643)\n2021-09-14T14:26:37Z Rolling forward 0000000000000000002d429f39afec70c938e888c3417d690bbc85e83529991c (499644)\n2021-09-14T14:26:40Z Rolling forward 00000000000000000024c0bdbec66a889778c00bc69be0a96cbbd98b75c3ce09 (499645)\n2021-09-14T14:26:43Z Rolling forward 00000000000000000082756af6724e3200ea9089cb4244cb2d94c83c3cd137d7 (499646)\n2021-09-14T14:26:47Z Rolling forward 0000000000000000007f3bf2c37dc14630153b93bc2c34542deadb34a5eb201f (499647)\n2021-09-14T14:26:51Z Rolling forward 0000000000000000003b9296ea38abd68e97beb0c5ed56a8255e6b379a02032b (499648)\n2021-09-14T14:26:54Z Rolling forward 000000000000000000146931cda4713b5ded152c9ae57effe37f216d5a5f31b6 (499649)\n2021-09-14T14:26:57Z Rolling forward 000000000000000000684318d6fc7266f8eb5dc349a170413a0c0ce2334da08f (499650)\n2021-09-14T14:27:00Z Rolling forward 000000000000000000846d905295c15c98f9dc8c8f3ab44bbb997cca9a8e4c83 (499651)\n2021-09-14T14:27:04Z Rolling forward 00000000000000000082bfa88de1c4e6501462e231f0aa54f552f36bdf34fdd3 (499652)\n2021-09-14T14:27:08Z Rolling forward 000000000000000000acce35f2b4ba5256f016da6024abb09ad60b6dcbd0ed83 (499653)\n2021-09-14T14:27:11Z Rolling forward 000000000000000000ae0edf99df2db7e05a0f18e3e5a3e0dfc67013dadc526f (499654)\n2021-09-14T14:27:14Z Rolling forward 00000000000000000087cec98103a704a4594831e8173fa3c916b3c537456ab7 (499655)\n2021-09-14T14:27:17Z Rolling forward 000000000000000000102d751e4c7e2de8f12e04cd4b44fe8179d492b29ea0e2 (499656)\n2021-09-14T14:27:21Z Rolling forward 0000000000000000001a98320ee19986cfb19f30bb1d1deb0cfc21ed9fa3c7ae (499657)\n2021-09-14T14:27:24Z Rolling forward 0000000000000000005ad979367405af6ad75465a8900089cb3bd7b53ff4dc9d (499658)\n2021-09-14T14:27:28Z Rolling forward 0000000000000000005bd3de0386b9c24f92e363a04da33b6b6ac7450997f4aa (499659)\n2021-09-14T14:27:32Z Rolling forward 0000000000000000009fd25eaf6245cd8a0a8869bbe28145f39e4de14dd62825 (499660)\n\n*** LND SYSTEMD STATUS ***\n\u25cf lnd.service - LND Lightning Daemon\n   Loaded: loaded (/etc/systemd/system/lnd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2021-09-14 11:20:13 BST; 4h 7min ago\n  Process: 7000 ExecStartPre=/home/admin/config.scripts/blitz.systemd.sh log lightning STARTED (code=exited, status=0/SUCCESS)\n Main PID: 7002 (lnd)\n    Tasks: 10 (limit: 4533)\n   CGroup: /system.slice/lnd.service\n           \u2514\u25007002 /usr/local/bin/lnd --tor.active --tor.streamisolation --tor.v3 --tor.socks=9070 --tor.control=9071 --listen=127.0.0.1:9735\n\nSep 14 11:20:13 raspberrypi systemd[1]: Starting LND Lightning Daemon...\nSep 14 11:20:13 raspberrypi systemd[1]: Started LND Lightning Daemon.\n\n*** LAST LND ERROR LOGS ***\nsudo journalctl -u lnd -b --no-pager -n12\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:35 BST. --\nSep 14 11:16:51 raspberrypi systemd[1]: Starting LND Lightning Daemon...\nSep 14 11:16:51 raspberrypi systemd[1]: Started LND Lightning Daemon.\nSep 14 11:19:13 raspberrypi lnd[1772]: unable to create chain control: unable to connect to bitcoind: -28: Loading block index...\nSep 14 11:19:13 raspberrypi systemd[1]: lnd.service: Main process exited, code=exited, status=1/FAILURE\nSep 14 11:19:13 raspberrypi systemd[1]: lnd.service: Failed with result 'exit-code'.\nSep 14 11:20:13 raspberrypi systemd[1]: lnd.service: Service RestartSec=1min expired, scheduling restart.\nSep 14 11:20:13 raspberrypi systemd[1]: lnd.service: Scheduled restart job, restart counter is at 1.\nSep 14 11:20:13 raspberrypi systemd[1]: Stopped LND Lightning Daemon.\nSep 14 11:20:13 raspberrypi systemd[1]: Starting LND Lightning Daemon...\nSep 14 11:20:13 raspberrypi systemd[1]: Started LND Lightning Daemon.\n\n*** LAST 30 LND INFO LOGS ***\nsudo tail -n 30 /mnt/hdd/lnd/logs/bitcoin/mainnet/lnd.log\n2021-09-14 11:16:51.708 [INF] LTND: Version: 0.12.1-beta commit=v0.12.1-beta, build=production, logging=default, debuglevel=debug\n2021-09-14 11:16:51.709 [INF] LTND: Active chain: Bitcoin (network=mainnet)\n2021-09-14 11:16:51.709 [INF] LTND: Opening the main database, this might take a few minutes...\n2021-09-14 11:16:51.709 [INF] LTND: Opening bbolt database, sync_freelist=true, auto_compact=false\n2021-09-14 11:16:51.724 [INF] CHDB: Checking for schema update: latest_version=20, db_version=20\n2021-09-14 11:16:51.724 [INF] LTND: Database now open (time_to_open=15.109685ms)!\n2021-09-14 11:16:51.763 [INF] RPCS: Password RPC server listening on 0.0.0.0:10009\n2021-09-14 11:16:51.769 [INF] RPCS: Password gRPC proxy started at 0.0.0.0:8080\n2021-09-14 11:16:51.769 [INF] LTND: Waiting for wallet encryption password. Use `lncli create` to create a wallet, `lncli unlock` to unlock an existing wallet, or `lncli changepassword` to change the password of an existing wallet and unlock it.\n2021-09-14 11:19:12.895 [INF] LNWL: Opened wallet\n2021-09-14 11:19:13.126 [INF] CHRE: Primary chain is set to: bitcoin\n2021-09-14 11:19:13.257 [ERR] LTND: unable to create chain control: unable to connect to bitcoind: -28: Loading block index...\n2021-09-14 11:19:13.257 [INF] LTND: Shutdown complete2021-09-14 11:20:14.120 [INF] LTND: Version: 0.12.1-beta commit=v0.12.1-beta, build=production, logging=default, debuglevel=debug\n2021-09-14 11:20:14.121 [INF] LTND: Active chain: Bitcoin (network=mainnet)\n2021-09-14 11:20:14.121 [INF] LTND: Opening the main database, this might take a few minutes...\n2021-09-14 11:20:14.121 [INF] LTND: Opening bbolt database, sync_freelist=true, auto_compact=false\n2021-09-14 11:20:14.133 [INF] CHDB: Checking for schema update: latest_version=20, db_version=20\n2021-09-14 11:20:14.133 [INF] LTND: Database now open (time_to_open=11.654861ms)!\n2021-09-14 11:20:14.172 [INF] RPCS: Password RPC server listening on 0.0.0.0:10009\n2021-09-14 11:20:14.177 [INF] RPCS: Password gRPC proxy started at 0.0.0.0:8080\n2021-09-14 11:20:14.177 [INF] LTND: Waiting for wallet encryption password. Use `lncli create` to create a wallet, `lncli unlock` to unlock an existing wallet, or `lncli changepassword` to change the password of an existing wallet and unlock it.\n\n*** NGINX SYSTEMD STATUS ***\n\u25cf nginx.service - A high performance web server and a reverse proxy server\n   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n  Drop-In: /etc/systemd/system/nginx.service.d\n           \u2514\u2500raspiblitz.conf\n   Active: active (running) since Tue 2021-09-14 11:16:37 BST; 4h 10min ago\n     Docs: man:nginx(8)\n Main PID: 905 (nginx)\n    Tasks: 5 (limit: 4533)\n   CGroup: /system.slice/nginx.service\n           \u251c\u2500905 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\n           \u251c\u2500911 nginx: worker process\n           \u251c\u2500913 nginx: worker process\n           \u251c\u2500914 nginx: worker process\n           \u2514\u2500915 nginx: worker process\n\nSep 14 11:16:36 raspberrypi systemd[1]: Starting A high performance web server and a reverse proxy server...\nSep 14 11:16:37 raspberrypi systemd[1]: Started A high performance web server and a reverse proxy server.\n\n*** LAST NGINX LOGS ***\nsudo journalctl -u nginx -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:35 BST. --\nSep 14 11:16:36 raspberrypi systemd[1]: Starting A high performance web server and a reverse proxy server...\nSep 14 11:16:37 raspberrypi systemd[1]: Started A high performance web server and a reverse proxy server.\n--> CHECK CONFIG: sudo nginx -t\n\n\n*** LAST 20 TOUCHSCREEN LOGS ***\nsudo tail -n 20 /home/pi/.cache/lxsession/LXDE-pi/run.log\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\n** Message: 01:44:02.973: wlan0: Received scan results\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\n** Message: 01:45:03.021: wlan0: Received scan results\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\n** Message: 01:46:02.982: wlan0: Received scan results\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\n** Message: 01:47:02.989: wlan0: Received scan results\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\nPlaying WAVE '/usr/share/piwiz/srprompt.wav' : Signed 16 bit Little Endian, Rate 22050 Hz, Mono\n\n\n*** LAST 20 LOOP LOGS ***\nsudo journalctl -u loopd -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:35 BST. --\n-- No entries --\n\n- RTL is OFF by config\n\n*** LAST 20 ElectRS LOGS ***\nsudo journalctl -u electrs -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:35 BST. --\n-- No entries --\n\n*** ElectRS Status ***\n##### STATUS ELECTRS SERVICE\nconfigured=0\nserviceInstalled=0\ninfoSync='Service not installed'\nserviceRunning=0\ntipSynced=0\ninitialSynced=0\nelectrumResponding=0\ninfoSync='Not running - check: sudo journalctl -u electrs'\n\n\n*** LAST 20 LIT LOGS ***\nsudo journalctl -u litd -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** LAST 20 BTCPayServer LOGS ***\nsudo journalctl -u btcpayserver -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** LAST 20 LNbits LOGS ***\nsudo journalctl -u lnbits -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** LAST 20 Thunderhub LOGS ***\nsudo journalctl -u thunderhub -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** LAST 20 SPECTER LOGS ***\nsudo journalctl -u cryptoadvance-specter -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** LAST 20 SPHINX LOGS ***\nsudo journalctl -u sphinxrelay -b --no-pager -n20\n-- Logs begin at Tue 2021-09-14 11:15:58 BST, end at Tue 2021-09-14 15:27:36 BST. --\n-- No entries --\n\n\n*** MOUNTED DRIVES ***\nFilesystem     Type      Size  Used Avail Use% Mounted on\n/dev/root      ext4       29G  3.8G   25G  14% /\ndevtmpfs       devtmpfs  1.9G     0  1.9G   0% /dev\ntmpfs          tmpfs     1.9G     0  1.9G   0% /dev/shm\ntmpfs          tmpfs     1.9G   33M  1.9G   2% /run\ntmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock\ntmpfs          tmpfs     1.9G     0  1.9G   0% /sys/fs/cgroup\ntmpfs          tmpfs      32M     0   32M   0% /var/cache/raspiblitz\n/dev/mmcblk0p1 vfat      253M   30M  223M  12% /boot\n/dev/sda1      ext4      916G  170G  700G  20% /mnt/hdd\ntmpfs          tmpfs     385M     0  385M   0% /run/user/1000\ntmpfs          tmpfs     385M     0  385M   0% /run/user/1001\n\n\n*** DATADRIVE ***\n# RASPIBLITZ DATA DRIVE Status\n\n# BASICS\nisMounted=1\nisBTRFS=0\nhddRaspiData=1\nisSSD=1\ndatadisk='sda'\ndatapartition='sda1'\nhddBlocksBitcoin=1\nhddBlocksLitecoin=0\nhddBytes=1000141693440\nhddGigaBytes=931\nhddUsedInfo='170G (20%)'\nhddDataFreeKB=733759240\nhddAdapterUSB=''\nhddAdapterUSAP=0\n\n# RAID\nisRaid=0\nraidCandidates=0\n\n# SWAP\nisSwapExternal=1\nSwapExternalPath='/mnt/hdd/swapfile'\n\n\n*** NETWORK ***\nlocalip=192.168.0.103\ndhcp=1\nnetwork_device=eth0\n\n*** HARDWARE TEST RESULTS ***\nUndervoltageReports in Logs: 0\n\n*** SYSTEM STATUS (can take some seconds to gather) ***\nlocalIP='192.168.0.102'\ntempCelsius='63.2'\nuptime=15042\nupsStatus='OFF'\nstartcountBlockchain=1\nbitcoinActive=1\nbitcoinErrorShort='Loading block index'\nbitcoinErrorFull='error code: -28 error message: Loading block index...'\nstartcountLightning=2\nlndActive=1\nlndRPCReady=0\nwalletOpened=0\nwalletReady=0\nwalletLocked=1\nlndRPCReady=0\nblitzTUIActive=0\nblitzTUIRestarts=0\nscriptRuntime=0\n\n*** OPTION: SHARE THIS DEBUG OUTPUT ***\nAn easy way to share this debug output on GitHub or on a support chat\nuse the following command and share the resulting link:\n/home/admin/XXdebugLogs.sh | nc termbin.com 9999\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawDebugLogData"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/hardware-info-sub": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Subscribe to hardware status information.",
        "operationId": "system_hardware_info_sub_system_hardware_info_sub_get",
        "responses": {
          "200": {
            "description": "Yields a JSON string with hardware information every 60.5 seconds:\n\n```JSON\n{\n  \"cpu_overall_percent\": 15.8,\n  \"cpu_per_cpu_percent\": [\n    11.8,\n    6.1,\n    12.5\n  ],\n  \"vram_total_bytes\": 25134919680,\n  \"vram_available_bytes\": 17240051712,\n  \"vram_used_bytes\": 6044856320,\n  \"vram_usage_percent\": 31.4,\n  \"swap_ram_total_bytes\": 2147479552,\n  \"swap_used_bytes\": 0,\n  \"swap_usage_bytes\": 0,\n  \"temperatures_celsius\": {\n    \"coretemp\": [\n      [\n        \"Core 1\",\n        51,\n        84,\n        100\n      ],\n      [\n        \"Core 2\",\n        53,\n        84,\n        100\n      ],\n      [\n        \"Core 3\",\n        50,\n        84,\n        100\n      ]\n    ]\n  },\n  \"boot_time_timestamp\": 1623486468,\n  \"disk_io_read_count\": 254574,\n  \"disk_io_write_count\": 133353,\n  \"disk_io_read_bytes\": 5306839040,\n  \"disk_io_write_bytes\": 5593076736,\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda1\",\n      \"mountpoint\": \"/boot/efi\",\n      \"filesystem_type\": \"vfat\",\n      \"partition_total_bytes\": 535805952,\n      \"partition_used_bytes\": 8228864,\n      \"partition_free_bytes\": 527577088,\n      \"partition_percent\": 1.5\n    },\n    {\n      \"device\": \"/dev/sda2\",\n      \"mountpoint\": \"/\",\n      \"filesystem_type\": \"ext4\",\n      \"partition_total_bytes\": 250438021120,\n      \"partition_used_bytes\": 177157742592,\n      \"partition_free_bytes\": 60487389184,\n      \"partition_percent\": 74.5\n    }\n  ],\n  \"networks\": [\n    {\n      \"interface_name\": \"lo\",\n      \"address\": \"127.0.0.1\",\n      \"mac_address\": \"00:00:00:00:00:00\"\n    },\n    {\n      \"interface_name\": \"enp4s0\",\n      \"address\": \"192.168.1.23\",\n      \"mac_address\": \"35:a3:5c:6a:4a:f0\"\n    }\n  ],\n  \"networks_bytes_sent\": 137088249,\n  \"networks_bytes_received\": 1603400654\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/reboot": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Reboots the system",
        "description": "Attempts to reboot the system.\n    Will send a `system_reboot_initiated` SSE message immediately to\n    all connected clients.",
        "operationId": "system_reboot_system_reboot_post",
        "responses": {
          "200": {
            "description": "True if successful. False on failure.\n    A failure will also send an error message with id `system_reboot_error`\n    to all connected clients.\n    ",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/system/shutdown": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Shuts the system down",
        "description": "Attempts to shutdown the system.\n    Will send a `system_shutdown_initiated` SSE message immediately to all\n    connected clients.",
        "operationId": "system_shutdown_system_shutdown_post",
        "responses": {
          "200": {
            "description": "True if successful. False on failure.\n    A failure will also send an error message with id system_shutdown_error\n    to all connected clients.\n    ",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AMPRecord": {
        "title": "AMPRecord",
        "required": [
          "root_share",
          "set_id",
          "child_index"
        ],
        "type": "object",
        "properties": {
          "root_share": {
            "title": "Root Share",
            "type": "string"
          },
          "set_id": {
            "title": "Set Id",
            "type": "string"
          },
          "child_index": {
            "title": "Child Index",
            "type": "integer"
          }
        }
      },
      "APIPlatform": {
        "title": "APIPlatform",
        "enum": [
          "raspiblitz",
          "native_python",
          "unknown"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Amp": {
        "title": "Amp",
        "required": [
          "root_share",
          "set_id",
          "child_index",
          "hash",
          "preimage"
        ],
        "type": "object",
        "properties": {
          "root_share": {
            "title": "Root Share",
            "type": "string"
          },
          "set_id": {
            "title": "Set Id",
            "type": "string"
          },
          "child_index": {
            "title": "Child Index",
            "type": "integer"
          },
          "hash": {
            "title": "Hash",
            "type": "string"
          },
          "preimage": {
            "title": "Preimage",
            "type": "string"
          }
        }
      },
      "Bip9Data": {
        "title": "Bip9Data",
        "required": [
          "status",
          "start_time",
          "timeout",
          "since",
          "min_activation_height"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "description": "One of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\" "
          },
          "bit": {
            "title": "Bit",
            "type": "integer",
            "description": "the bit(0-28) in the block version field used to signal this softfork(only for `started` status)"
          },
          "start_time": {
            "title": "Start Time",
            "type": "integer",
            "description": "The minimum median time past of a block at which the bit gains its meaning"
          },
          "timeout": {
            "title": "Timeout",
            "type": "integer",
            "description": "The median time past of a block at which the deployment is considered failed if not yet locked in"
          },
          "since": {
            "title": "Since",
            "type": "integer",
            "description": "Height of the first block to which the status applies"
          },
          "min_activation_height": {
            "title": "Min Activation Height",
            "type": "integer",
            "description": "Minimum height of blocks for which the rules may be enforced"
          },
          "statistics": {
            "title": "Statistics",
            "allOf": [
              {
                "$ref": "#/components/schemas/Bip9Statistics"
              }
            ],
            "description": "numeric statistics about BIP9 signalling for a softfork(only for `started` status)"
          },
          "height": {
            "title": "Height",
            "type": "integer",
            "description": "Height of the first block which the rules are or will be enforced(only for `buried` type, or `bip9` type with `active` status)"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "True if the rules are enforced for the mempool and the next block"
          }
        }
      },
      "Bip9Statistics": {
        "title": "Bip9Statistics",
        "required": [
          "period",
          "threshold",
          "elapsed",
          "count",
          "possible"
        ],
        "type": "object",
        "properties": {
          "period": {
            "title": "Period",
            "type": "integer",
            "description": "The length in blocks of the BIP9 signalling period"
          },
          "threshold": {
            "title": "Threshold",
            "type": "integer",
            "description": "The number of blocks with the version bit set required to activate the feature"
          },
          "elapsed": {
            "title": "Elapsed",
            "type": "integer",
            "description": "The number of blocks elapsed since the beginning of the current period"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "The number of blocks with the version bit set in the current period"
          },
          "possible": {
            "title": "Possible",
            "type": "boolean",
            "description": "False if there are not enough blocks left in this period to pass activation threshold"
          }
        }
      },
      "BlockchainInfo": {
        "title": "BlockchainInfo",
        "required": [
          "chain",
          "blocks",
          "headers",
          "best_block_hash",
          "difficulty",
          "mediantime",
          "verification_progress",
          "initial_block_download",
          "chainwork",
          "size_on_disk",
          "pruned",
          "warnings",
          "softforks"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "type": "string",
            "description": "Current network name(main, test, regtest)"
          },
          "blocks": {
            "title": "Blocks",
            "type": "integer",
            "description": "The height of the most-work fully-validated chain. The genesis block has height 0"
          },
          "headers": {
            "title": "Headers",
            "type": "integer",
            "description": "The current number of headers we have validated"
          },
          "best_block_hash": {
            "title": "Best Block Hash",
            "type": "string",
            "description": "The hash of the currently best block"
          },
          "difficulty": {
            "title": "Difficulty",
            "type": "integer",
            "description": "The current difficulty"
          },
          "mediantime": {
            "title": "Mediantime",
            "type": "integer",
            "description": "Median time for the current best block"
          },
          "verification_progress": {
            "title": "Verification Progress",
            "type": "number",
            "description": "Estimate of verification progress[0..1]"
          },
          "initial_block_download": {
            "title": "Initial Block Download",
            "type": "boolean",
            "description": "Estimate of whether this node is in Initial Block Download mode"
          },
          "chainwork": {
            "title": "Chainwork",
            "type": "string",
            "description": "total amount of work in active chain, in hexadecimal"
          },
          "size_on_disk": {
            "title": "Size On Disk",
            "type": "integer",
            "description": "The estimated size of the block and undo files on disk"
          },
          "pruned": {
            "title": "Pruned",
            "type": "boolean",
            "description": "If the blocks are subject to pruning"
          },
          "prune_height": {
            "title": "Prune Height",
            "type": "integer",
            "description": "Lowest-height complete block stored(only present if pruning is enabled)"
          },
          "automatic_pruning": {
            "title": "Automatic Pruning",
            "type": "boolean",
            "description": "Whether automatic pruning is enabled(only present if pruning is enabled)"
          },
          "prune_target_size": {
            "title": "Prune Target Size",
            "type": "integer",
            "description": "The target size used by pruning(only present if automatic pruning is enabled)"
          },
          "warnings": {
            "title": "Warnings",
            "type": "string",
            "description": "Any network and blockchain warnings"
          },
          "softforks": {
            "title": "Softforks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoftFork"
            },
            "description": "Status of softforks"
          }
        }
      },
      "BtcInfo": {
        "title": "BtcInfo",
        "required": [
          "blocks",
          "headers",
          "verification_progress",
          "difficulty",
          "size_on_disk",
          "version",
          "subversion",
          "connections_in",
          "connections_out"
        ],
        "type": "object",
        "properties": {
          "blocks": {
            "title": "Blocks",
            "type": "integer",
            "description": "The height of the most-work fully-validated chain. The genesis block has height 0"
          },
          "headers": {
            "title": "Headers",
            "type": "integer",
            "description": "The current number of headers we have validated"
          },
          "verification_progress": {
            "title": "Verification Progress",
            "type": "number",
            "description": "Estimate of verification progress[0..1]"
          },
          "difficulty": {
            "title": "Difficulty",
            "type": "integer",
            "description": "The current difficulty"
          },
          "size_on_disk": {
            "title": "Size On Disk",
            "type": "integer",
            "description": "The estimated size of the block and undo files on disk"
          },
          "networks": {
            "title": "Networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BtcNetwork"
            },
            "description": "Which networks are in use (ipv4, ipv6 or onion)",
            "default": []
          },
          "version": {
            "title": "Version",
            "type": "integer",
            "description": "The bitcoin core server version"
          },
          "subversion": {
            "title": "Subversion",
            "type": "string",
            "description": "The server subversion string"
          },
          "connections_in": {
            "title": "Connections In",
            "type": "integer",
            "description": "The number of inbound connections"
          },
          "connections_out": {
            "title": "Connections Out",
            "type": "integer",
            "description": "The number of outbound connections"
          }
        }
      },
      "BtcLocalAddress": {
        "title": "BtcLocalAddress",
        "required": [
          "address",
          "port",
          "score"
        ],
        "type": "object",
        "properties": {
          "address": {
            "title": "Address",
            "type": "string",
            "description": "Network address"
          },
          "port": {
            "title": "Port",
            "type": "integer",
            "description": "Network port"
          },
          "score": {
            "title": "Score",
            "type": "integer",
            "description": "Relative score"
          }
        }
      },
      "BtcNetwork": {
        "title": "BtcNetwork",
        "required": [
          "name",
          "limited",
          "reachable",
          "proxy_randomize_credentials"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Which network is in use (ipv4, ipv6 or onion)"
          },
          "limited": {
            "title": "Limited",
            "type": "boolean",
            "description": "Is the network limited using - onlynet?"
          },
          "reachable": {
            "title": "Reachable",
            "type": "boolean",
            "description": "Is the network reachable?"
          },
          "proxy": {
            "title": "Proxy",
            "type": "string",
            "description": "host:port of the proxy that is used for this network, or empty if none",
            "default": ""
          },
          "proxy_randomize_credentials": {
            "title": "Proxy Randomize Credentials",
            "type": "boolean",
            "description": "Whether randomized credentials are used"
          }
        }
      },
      "Chain": {
        "title": "Chain",
        "required": [
          "chain",
          "network"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "type": "string"
          },
          "network": {
            "title": "Network",
            "type": "string"
          }
        }
      },
      "Channel": {
        "title": "Channel",
        "type": "object",
        "properties": {
          "channel_id": {
            "title": "Channel Id",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "boolean"
          },
          "peer_publickey": {
            "title": "Peer Publickey",
            "type": "string"
          },
          "peer_alias": {
            "title": "Peer Alias",
            "type": "string"
          },
          "balance_local": {
            "title": "Balance Local",
            "type": "integer"
          },
          "balance_remote": {
            "title": "Balance Remote",
            "type": "integer"
          },
          "balance_capacity": {
            "title": "Balance Capacity",
            "type": "integer"
          }
        }
      },
      "ChannelUpdate": {
        "title": "ChannelUpdate",
        "required": [
          "signature",
          "chain_hash",
          "chan_id",
          "timestamp",
          "message_flags",
          "channel_flags",
          "time_lock_delta",
          "htlc_minimum_msat",
          "base_fee",
          "fee_rate",
          "htlc_maximum_msat",
          "extra_opaque_data"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "chain_hash": {
            "title": "Chain Hash",
            "type": "string"
          },
          "chan_id": {
            "title": "Chan Id",
            "type": "integer"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "integer"
          },
          "message_flags": {
            "title": "Message Flags",
            "type": "integer"
          },
          "channel_flags": {
            "title": "Channel Flags",
            "type": "integer"
          },
          "time_lock_delta": {
            "title": "Time Lock Delta",
            "type": "integer"
          },
          "htlc_minimum_msat": {
            "title": "Htlc Minimum Msat",
            "type": "integer"
          },
          "base_fee": {
            "title": "Base Fee",
            "type": "integer"
          },
          "fee_rate": {
            "title": "Fee Rate",
            "type": "integer"
          },
          "htlc_maximum_msat": {
            "title": "Htlc Maximum Msat",
            "type": "integer"
          },
          "extra_opaque_data": {
            "title": "Extra Opaque Data",
            "type": "string"
          }
        }
      },
      "ConnectionInfo": {
        "title": "ConnectionInfo",
        "type": "object",
        "properties": {
          "lnd_admin_macaroon": {
            "title": "Lnd Admin Macaroon",
            "type": "string",
            "description": "lnd macaroon with admin rights in hexstring format",
            "default": ""
          },
          "lnd_invoice_macaroon": {
            "title": "Lnd Invoice Macaroon",
            "type": "string",
            "description": "lnd macaroon that only creates invoices in hexstring format",
            "default": ""
          },
          "lnd_readonly_macaroon": {
            "title": "Lnd Readonly Macaroon",
            "type": "string",
            "description": "lnd macaroon with only read-only rights in hexstring format",
            "default": ""
          },
          "lnd_tls_cert": {
            "title": "Lnd Tls Cert",
            "type": "string",
            "description": "lnd tls cert in hexstring format",
            "default": ""
          },
          "lnd_rest_onion": {
            "title": "Lnd Rest Onion",
            "type": "string",
            "description": "lnd rest api onion address",
            "default": ""
          },
          "lnd_btcpay_connection_string": {
            "title": "Lnd Btcpay Connection String",
            "type": "string",
            "description": "connect BtcPay server locally to your lnd lightning node",
            "default": ""
          },
          "lnd_zeus_connection_string": {
            "title": "Lnd Zeus Connection String",
            "type": "string",
            "description": "connect Zeus app to your lnd lightning node",
            "default": ""
          },
          "cl_rest_zeus_connection_string": {
            "title": "Cl Rest Zeus Connection String",
            "type": "string",
            "description": "connect Zeus app to your core lightning node over rest",
            "default": ""
          },
          "cl_rest_macaroon": {
            "title": "Cl Rest Macaroon",
            "type": "string",
            "description": "core lightning rest macaroon",
            "default": ""
          },
          "cl_rest_onion": {
            "title": "Cl Rest Onion",
            "type": "string",
            "description": "core lightning rest onion address",
            "default": ""
          }
        }
      },
      "CustomRecordsEntry": {
        "title": "CustomRecordsEntry",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "integer"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        }
      },
      "Feature": {
        "title": "Feature",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "is_required": {
            "title": "Is Required",
            "type": "boolean"
          },
          "is_known": {
            "title": "Is Known",
            "type": "boolean"
          }
        }
      },
      "FeaturesEntry": {
        "title": "FeaturesEntry",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "integer"
          },
          "value": {
            "$ref": "#/components/schemas/Feature"
          }
        }
      },
      "FeeEstimationMode": {
        "title": "FeeEstimationMode",
        "enum": [
          "conservative",
          "economical"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "FeeRevenue": {
        "title": "FeeRevenue",
        "required": [
          "day",
          "week",
          "month"
        ],
        "type": "object",
        "properties": {
          "day": {
            "title": "Day",
            "type": "integer",
            "description": "Fee revenue earned in the last 24 hours"
          },
          "week": {
            "title": "Week",
            "type": "integer",
            "description": "Fee revenue earned in the last 7days"
          },
          "month": {
            "title": "Month",
            "type": "integer",
            "description": "Fee revenue earned in the last month"
          },
          "year": {
            "title": "Year",
            "type": "integer",
            "description": "Fee revenue earned in the last year. Might be null if not implemented by backend."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Fee revenue earned in the last year. Might be null if not implemented by backend"
          }
        }
      },
      "GenericTx": {
        "title": "GenericTx",
        "required": [
          "id",
          "category",
          "type",
          "amount",
          "time_stamp",
          "status"
        ],
        "type": "object",
        "properties": {
          "index": {
            "title": "Index",
            "type": "integer",
            "description": "The index of the transaction.",
            "default": 0
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "\nUnique identifier for this transaction.\n\nDepending on the type of the transaction it will be different:\n#### On-chain\nThe transaction hash\n\n#### Lightning Invoice and Payment\nThe payment request\n"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TxCategory"
              }
            ],
            "description": "Whether this is an onchain (**onchain**) or lightning (**ln**) transaction."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TxType"
              }
            ],
            "description": "Whether this is an outgoing (**send**) transaction or an incoming (**receive**) transaction."
          },
          "amount": {
            "title": "Amount",
            "type": "integer",
            "description": "\nThe value of the transaction, depending on the category in satoshis or millisatoshis.\n\n#### On-chain\nTransaction amount in satoshis\n\n#### Lightning Invoice\n* value in millisatoshis of the invoice if *unsettled*\n* amount in millisatoshis paid if invoice is *settled*\n\n#### Lightning Payment\n* amount sent in millisatoshis\n\n"
          },
          "time_stamp": {
            "title": "Time Stamp",
            "type": "integer",
            "description": "\nThe unix timestamp in seconds for the transaction.\n\nThe timestamp can mean different things in different situations:\n\n#### Lightning Invoice\n* Creation date for in-flight or failed invoices\n* Settle date for succeeded invoices\n\n#### On-chain\n* Creation date for transaction waiting in the mempool\n* Timestamp of the block where this transaction is included\n\n#### Lightning Payment\n\n"
          },
          "comment": {
            "title": "Comment",
            "type": "string",
            "description": "Optional comment for this transaction",
            "default": ""
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TxStatus"
              }
            ],
            "description": "\nThe status of the transaction. Depending on the transaction category this can be different values:\n\nMay have different meanings in different situations:\n#### unknown\nAn unknown state was found.\n\n#### in_flight\n* A lightning payment is being sent\n* An invoice is waiting for the incoming payment\n* An on-chain transaction is waiting in the mempool\n\n#### succeeded\n* A lighting payment was successfully sent\n* An incoming payment was received for an invoice\n* An on-chain transaction was included in a block\n\n#### failed\n* A lightning payment attempt which could not be completed (no route found, insufficient funds, ...)\n* An invoice is expired or some other error happened\n"
          },
          "block_height": {
            "title": "Block Height",
            "type": "integer",
            "description": "Block height, if included in a block. Only applicable for category **onchain**."
          },
          "num_confs": {
            "title": "Num Confs",
            "minimum": 0.0,
            "type": "integer",
            "description": "Number of confirmations. Only applicable for category **onchain**."
          },
          "total_fees": {
            "title": "Total Fees",
            "type": "integer",
            "description": "Total fees paid for this transaction"
          }
        }
      },
      "HTLCAttempt": {
        "title": "HTLCAttempt",
        "required": [
          "attempt_id",
          "status",
          "route",
          "attempt_time_ns",
          "resolve_time_ns",
          "failure",
          "preimage"
        ],
        "type": "object",
        "properties": {
          "attempt_id": {
            "title": "Attempt Id",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/HTLCStatus"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          },
          "attempt_time_ns": {
            "title": "Attempt Time Ns",
            "type": "integer"
          },
          "resolve_time_ns": {
            "title": "Resolve Time Ns",
            "type": "integer"
          },
          "failure": {
            "$ref": "#/components/schemas/HTLCAttemptFailure"
          },
          "preimage": {
            "title": "Preimage",
            "type": "string"
          }
        }
      },
      "HTLCAttemptFailure": {
        "title": "HTLCAttemptFailure",
        "required": [
          "code",
          "channel_update",
          "htlc_msat",
          "onion_sha_256",
          "cltv_expiry",
          "flags",
          "failure_source_index",
          "height"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "integer"
          },
          "channel_update": {
            "$ref": "#/components/schemas/ChannelUpdate"
          },
          "htlc_msat": {
            "title": "Htlc Msat",
            "type": "integer"
          },
          "onion_sha_256": {
            "title": "Onion Sha 256",
            "type": "string"
          },
          "cltv_expiry": {
            "title": "Cltv Expiry",
            "type": "integer"
          },
          "flags": {
            "title": "Flags",
            "type": "integer"
          },
          "failure_source_index": {
            "title": "Failure Source Index",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        }
      },
      "HTLCStatus": {
        "title": "HTLCStatus",
        "enum": [
          "in_flight",
          "succeeded",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Hop": {
        "title": "Hop",
        "required": [
          "chan_id",
          "chan_capacity",
          "amt_to_forward",
          "fee",
          "expiry",
          "amt_to_forward_msat",
          "fee_msat",
          "pub_key",
          "tlv_payload"
        ],
        "type": "object",
        "properties": {
          "chan_id": {
            "title": "Chan Id",
            "type": "integer"
          },
          "chan_capacity": {
            "title": "Chan Capacity",
            "type": "integer"
          },
          "amt_to_forward": {
            "title": "Amt To Forward",
            "type": "integer"
          },
          "fee": {
            "title": "Fee",
            "type": "integer"
          },
          "expiry": {
            "title": "Expiry",
            "type": "integer"
          },
          "amt_to_forward_msat": {
            "title": "Amt To Forward Msat",
            "type": "integer"
          },
          "fee_msat": {
            "title": "Fee Msat",
            "type": "integer"
          },
          "pub_key": {
            "title": "Pub Key",
            "type": "string"
          },
          "tlv_payload": {
            "title": "Tlv Payload",
            "type": "boolean"
          }
        }
      },
      "HopHint": {
        "title": "HopHint",
        "required": [
          "node_id",
          "chan_id",
          "fee_base_msat",
          "fee_proportional_millionths",
          "cltv_expiry_delta"
        ],
        "type": "object",
        "properties": {
          "node_id": {
            "title": "Node Id",
            "type": "string",
            "description": "The public key of the node at the start of the channel."
          },
          "chan_id": {
            "title": "Chan Id",
            "type": "string",
            "description": "The unique identifier of the channel."
          },
          "fee_base_msat": {
            "title": "Fee Base Msat",
            "type": "integer",
            "description": "The base fee of the channel denominated in msat."
          },
          "fee_proportional_millionths": {
            "title": "Fee Proportional Millionths",
            "type": "integer",
            "description": "The fee rate of the channel for sending one satoshi across it denominated in msat"
          },
          "cltv_expiry_delta": {
            "title": "Cltv Expiry Delta",
            "type": "integer",
            "description": "The time-lock delta of the channel."
          }
        }
      },
      "Invoice": {
        "title": "Invoice",
        "required": [
          "value_msat",
          "add_index",
          "state"
        ],
        "type": "object",
        "properties": {
          "memo": {
            "title": "Memo",
            "type": "string",
            "description": "Optional memo to attach along with the invoice. Used for record keeping purposes for the invoice's creator,\n        and will also be set in the description field of the encoded payment request if the description_hash field is not being used."
          },
          "r_preimage": {
            "title": "R Preimage",
            "type": "string",
            "description": "The hex-encoded preimage(32 byte) which will allow settling an incoming HTLC payable to this preimage."
          },
          "r_hash": {
            "title": "R Hash",
            "type": "string",
            "description": "The hash of the preimage."
          },
          "value_msat": {
            "title": "Value Msat",
            "type": "integer",
            "description": "The value of this invoice in milli satoshis."
          },
          "settled": {
            "title": "Settled",
            "type": "boolean",
            "description": "Whether this invoice has been fulfilled",
            "default": false
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "integer",
            "description": "When this invoice was created. Not available with CLN."
          },
          "settle_date": {
            "title": "Settle Date",
            "type": "integer",
            "description": "When this invoice was settled. Not available with pending invoices."
          },
          "expiry_date": {
            "title": "Expiry Date",
            "type": "integer",
            "description": "The time at which this invoice expires"
          },
          "payment_request": {
            "title": "Payment Request",
            "type": "string",
            "description": "A bare-bones invoice for a payment within the\n    Lightning Network. With the details of the invoice, the sender has all the data necessary to\n    send a payment to the recipient.\n    "
          },
          "description_hash": {
            "title": "Description Hash",
            "type": "string",
            "description": "\n    Hash(SHA-256) of a description of the payment. Used if the description of payment(memo) is too\n    long to naturally fit within the description field of an encoded payment request.\n    "
          },
          "expiry": {
            "title": "Expiry",
            "type": "integer",
            "description": "Payment request expiry time in seconds. Default is 3600 (1 hour)."
          },
          "fallback_addr": {
            "title": "Fallback Addr",
            "type": "string",
            "description": "Fallback on-chain address."
          },
          "cltv_expiry": {
            "title": "Cltv Expiry",
            "type": "integer",
            "description": "Delta to use for the time-lock of the CLTV extended to the final hop."
          },
          "route_hints": {
            "title": "Route Hints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteHint"
            },
            "description": "\n    Route hints that can each be individually used to assist in reaching the invoice's destination.\n    "
          },
          "private": {
            "title": "Private",
            "type": "boolean",
            "description": "Whether this invoice should include routing hints for private channels."
          },
          "add_index": {
            "title": "Add Index",
            "type": "string",
            "description": "\nThe index of this invoice. Each newly created invoice will increment this index making it monotonically increasing.\nCLN and LND handle ids differently. LND will generate an auto incremented integer id, while CLN will use a user supplied string id.\nTo unify both, we auto generate an id for CLN and use the add_index for LND.\n\nFor `LND` this will be an `integer` in string form. This is auto generated by LND.\n\nFor `CLN` this will be a `string`. If the invoice was generated by BlitzAPI, this will be a\n[Firebase-like PushID](https://firebase.blog/posts/2015/02/the-2120-ways-to-ensure-unique_68).\nIf generated by some other method, it'll be the string supplied by the user at the time of creation of the invoice.\n"
          },
          "settle_index": {
            "title": "Settle Index",
            "type": "integer",
            "description": "\n        The \"settle\" index of this invoice. Each newly settled invoice will  increment this index making it monotonically increasing.\n    "
          },
          "amt_paid_sat": {
            "title": "Amt Paid Sat",
            "type": "integer",
            "description": "\n    The amount that was accepted for this invoice, in satoshis. This\n    will ONLY be set if this invoice has been settled. We provide\n    this field as if the invoice was created with a zero value,\n    then we need to record what amount was ultimately accepted.\n    Additionally, it's possible that the sender paid MORE that\n    was specified in the original invoice. So we'll record that here as well.\n    "
          },
          "amt_paid_msat": {
            "title": "Amt Paid Msat",
            "type": "integer",
            "description": "\n    The amount that was accepted for this invoice, in millisatoshis.\n    This will ONLY be set if this invoice has been settled. We\n    provide this field as if the invoice was created with a zero value,\n    then we need to record what amount was ultimately accepted. Additionally,\n    it's possible that the sender paid MORE that was specified in the\n    original invoice. So we'll record that here as well.\n    "
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceState"
              }
            ],
            "description": "The state the invoice is in."
          },
          "htlcs": {
            "title": "Htlcs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceHTLC"
            },
            "description": "List of HTLCs paying to this invoice[EXPERIMENTAL]."
          },
          "features": {
            "title": "Features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturesEntry"
            },
            "description": "List of features advertised on the invoice."
          },
          "is_keysend": {
            "title": "Is Keysend",
            "type": "boolean",
            "description": "[LND only] Indicates if this invoice was a spontaneous payment that arrived via keysend[EXPERIMENTAL]."
          },
          "payment_addr": {
            "title": "Payment Addr",
            "type": "string",
            "description": " The payment address of this invoice. This value will be used in MPP payments,\n    and also for newer invoices that always require the MPP payload for added end-to-end security."
          },
          "is_amp": {
            "title": "Is Amp",
            "type": "boolean",
            "description": "Signals whether or not this is an AMP invoice."
          }
        }
      },
      "InvoiceHTLC": {
        "title": "InvoiceHTLC",
        "required": [
          "chan_id",
          "htlc_index",
          "amt_msat",
          "accept_height",
          "accept_time",
          "resolve_time",
          "expiry_height",
          "state",
          "mpp_total_amt_msat"
        ],
        "type": "object",
        "properties": {
          "chan_id": {
            "title": "Chan Id",
            "type": "integer",
            "description": "The channel ID over which the HTLC was received."
          },
          "htlc_index": {
            "title": "Htlc Index",
            "type": "integer",
            "description": "The index of the HTLC on the channel."
          },
          "amt_msat": {
            "title": "Amt Msat",
            "type": "integer",
            "description": "The amount of the HTLC in msat."
          },
          "accept_height": {
            "title": "Accept Height",
            "type": "integer",
            "description": "The block height at which this HTLC was accepted."
          },
          "accept_time": {
            "title": "Accept Time",
            "type": "integer",
            "description": "The time at which this HTLC was accepted."
          },
          "resolve_time": {
            "title": "Resolve Time",
            "type": "integer",
            "description": "The time at which this HTLC was resolved."
          },
          "expiry_height": {
            "title": "Expiry Height",
            "type": "integer",
            "description": "The block height at which this HTLC expires."
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceHTLCState"
              }
            ],
            "description": "The state of the HTLC."
          },
          "custom_records": {
            "title": "Custom Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomRecordsEntry"
            },
            "description": "Custom tlv records.",
            "default": []
          },
          "mpp_total_amt_msat": {
            "title": "Mpp Total Amt Msat",
            "type": "integer",
            "description": "The total amount of the mpp payment in msat."
          },
          "amp": {
            "title": "Amp",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amp"
              }
            ],
            "description": "Details relevant to AMP HTLCs, only populated if this is an AMP HTLC."
          }
        }
      },
      "InvoiceHTLCState": {
        "title": "InvoiceHTLCState",
        "enum": [
          "accepted",
          "settled",
          "canceled"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "InvoiceState": {
        "title": "InvoiceState",
        "enum": [
          "open",
          "settled",
          "canceled",
          "accepted"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "LightningInfoLite": {
        "title": "LightningInfoLite",
        "required": [
          "implementation",
          "version",
          "identity_pubkey",
          "identity_uri",
          "num_pending_channels",
          "num_active_channels",
          "num_inactive_channels",
          "num_peers",
          "block_height"
        ],
        "type": "object",
        "properties": {
          "implementation": {
            "title": "Implementation",
            "type": "string",
            "description": "Lightning software implementation (LND, c-lightning)"
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "Version of the implementation"
          },
          "identity_pubkey": {
            "title": "Identity Pubkey",
            "type": "string",
            "description": "The identity pubkey of the current node"
          },
          "identity_uri": {
            "title": "Noude URI",
            "type": "string",
            "description": "The complete URI of the current node"
          },
          "num_pending_channels": {
            "title": "Num Pending Channels",
            "type": "integer",
            "description": "Number of pending channels"
          },
          "num_active_channels": {
            "title": "Num Active Channels",
            "type": "integer",
            "description": "Number of active channels"
          },
          "num_inactive_channels": {
            "title": "Num Inactive Channels",
            "type": "integer",
            "description": "Number of inactive channels"
          },
          "num_peers": {
            "title": "Num Peers",
            "type": "integer",
            "description": "Number of peers"
          },
          "block_height": {
            "title": "Block Height",
            "type": "integer",
            "description": "The node's current view of the height of the best block"
          },
          "synced_to_chain": {
            "title": "Synced To Chain",
            "type": "boolean",
            "description": "Whether the wallet's view is synced to the main chain"
          },
          "synced_to_graph": {
            "title": "Synced To Graph",
            "type": "boolean",
            "description": "Whether we consider ourselves synced with the public channel graph."
          }
        }
      },
      "LnInfo": {
        "title": "LnInfo",
        "required": [
          "implementation",
          "version",
          "commit_hash",
          "alias",
          "color",
          "num_pending_channels",
          "num_active_channels",
          "num_inactive_channels",
          "num_peers",
          "block_height"
        ],
        "type": "object",
        "properties": {
          "implementation": {
            "title": "Implementation",
            "type": "string",
            "description": "Lightning software implementation (LND, CLN)"
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "The version of the software that the node is running."
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string",
            "description": "The SHA1 commit hash that the daemon is compiled with."
          },
          "identity_pubkey": {
            "title": "Identity Pubkey",
            "type": "string",
            "default": "The identity pubkey of the current node."
          },
          "identity_uri": {
            "title": "Identity Uri",
            "type": "string",
            "default": "The complete URI (pubkey@physicaladdress:port) the current node."
          },
          "alias": {
            "title": "Alias",
            "type": "string",
            "description": "The alias of the node."
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color of the current node in hex code format."
          },
          "num_pending_channels": {
            "title": "Num Pending Channels",
            "type": "integer",
            "description": "Number of pending channels."
          },
          "num_active_channels": {
            "title": "Num Active Channels",
            "type": "integer",
            "description": "Number of active channels."
          },
          "num_inactive_channels": {
            "title": "Num Inactive Channels",
            "type": "integer",
            "description": "Number of inactive channels."
          },
          "num_peers": {
            "title": "Num Peers",
            "type": "integer",
            "description": "Number of peers."
          },
          "block_height": {
            "title": "Block Height",
            "type": "integer",
            "description": "The node's current view of the height of the best block. Only available with LND."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The node's current view of the hash of the best block. Only available with LND.",
            "default": ""
          },
          "best_header_timestamp": {
            "title": "Best Header Timestamp",
            "type": "integer",
            "description": "Timestamp of the block best known to the wallet. Only available with LND."
          },
          "synced_to_chain": {
            "title": "Synced To Chain",
            "type": "boolean",
            "description": "Whether the wallet's view is synced to the main chain. Only available with LND."
          },
          "synced_to_graph": {
            "title": "Synced To Graph",
            "type": "boolean",
            "description": "Whether we consider ourselves synced with the public channel graph. Only available with LND."
          },
          "chains": {
            "title": "Chains",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chain"
            },
            "description": "A list of active chains the node is connected to",
            "default": []
          },
          "uris": {
            "title": "Uris",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The URIs of the current node.",
            "default": []
          },
          "features": {
            "title": "Features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturesEntry"
            },
            "description": "Features that our node has advertised in our init message node announcements and invoices. Not yet implemented with CLN",
            "default": []
          }
        }
      },
      "LoginInput": {
        "title": "LoginInput",
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "title": "Password",
            "minLength": 8,
            "type": "string"
          },
          "one_time_password": {
            "title": "One Time Password",
            "maxLength": 6,
            "minLength": 6,
            "pattern": "^[0-9]+$",
            "type": "string"
          }
        }
      },
      "MPPRecord": {
        "title": "MPPRecord",
        "required": [
          "payment_addr",
          "total_amt_msat"
        ],
        "type": "object",
        "properties": {
          "payment_addr": {
            "title": "Payment Addr",
            "type": "string"
          },
          "total_amt_msat": {
            "title": "Total Amt Msat",
            "type": "integer"
          }
        }
      },
      "NetworkInfo": {
        "title": "NetworkInfo",
        "required": [
          "version",
          "subversion",
          "protocol_version",
          "local_relay",
          "time_offset",
          "connections",
          "connections_in",
          "connections_out",
          "network_active",
          "networks",
          "relay_fee",
          "incremental_fee"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "integer",
            "description": "The bitcoin core server version"
          },
          "subversion": {
            "title": "Subversion",
            "type": "string",
            "description": "The server subversion string"
          },
          "protocol_version": {
            "title": "Protocol Version",
            "type": "integer",
            "description": "The protocol version"
          },
          "local_services": {
            "title": "Local Services",
            "type": "string",
            "description": "The services we offer to the network, hex formatted"
          },
          "local_services_names": {
            "title": "Local Services Names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The services we offer to the network, in human-readable form",
            "default": []
          },
          "local_relay": {
            "title": "Local Relay",
            "type": "boolean",
            "description": "True if transaction relay is requested from peers"
          },
          "time_offset": {
            "title": "Time Offset",
            "type": "integer",
            "description": "The time offset"
          },
          "connections": {
            "title": "Connections",
            "type": "integer",
            "description": "The total number of connections"
          },
          "connections_in": {
            "title": "Connections In",
            "type": "integer",
            "description": "The number of inbound connections"
          },
          "connections_out": {
            "title": "Connections Out",
            "type": "integer",
            "description": "The number of outbound connections"
          },
          "network_active": {
            "title": "Network Active",
            "type": "boolean",
            "description": "Whether p2p networking is enabled"
          },
          "networks": {
            "title": "Networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BtcNetwork"
            },
            "description": "Information per network"
          },
          "relay_fee": {
            "title": "Relay Fee",
            "type": "integer",
            "description": "Minimum relay fee for transactions in BTC/kB"
          },
          "incremental_fee": {
            "title": "Incremental Fee",
            "type": "integer",
            "description": "Minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB"
          },
          "local_addresses": {
            "title": "Local Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BtcLocalAddress"
            },
            "description": "List of local addresses",
            "default": []
          },
          "warnings": {
            "title": "Warnings",
            "type": "string",
            "description": "Any network and blockchain warnings"
          }
        }
      },
      "NewAddressInput": {
        "title": "NewAddressInput",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnchainAddressType"
              }
            ],
            "description": "\nAddress-types has to be one of:\n* p2wkh:  Pay to witness key hash (bech32)\n* np2wkh: Pay to nested witness key hash\n    "
          }
        }
      },
      "OnChainTransaction": {
        "title": "OnChainTransaction",
        "required": [
          "tx_hash",
          "amount",
          "num_confirmations",
          "block_height",
          "time_stamp",
          "total_fees"
        ],
        "type": "object",
        "properties": {
          "tx_hash": {
            "title": "Tx Hash",
            "type": "string",
            "description": "The transaction hash"
          },
          "amount": {
            "title": "Amount",
            "type": "integer",
            "description": "The transaction amount, denominated in satoshis"
          },
          "num_confirmations": {
            "title": "Num Confirmations",
            "type": "integer",
            "description": "The number of confirmations"
          },
          "block_height": {
            "title": "Block Height",
            "type": "integer",
            "description": "The height of the block this transaction was included in"
          },
          "time_stamp": {
            "title": "Time Stamp",
            "type": "integer",
            "description": "Timestamp of this transaction"
          },
          "total_fees": {
            "title": "Total Fees",
            "type": "integer",
            "description": "Fees paid for this transaction"
          },
          "dest_addresses": {
            "title": "Dest Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Addresses that received funds for this transaction",
            "default": []
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "An optional label that was set on transaction broadcast.",
            "default": ""
          }
        }
      },
      "OnchainAddressType": {
        "title": "OnchainAddressType",
        "enum": [
          "p2wkh",
          "np2wkh"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Payment": {
        "title": "Payment",
        "required": [
          "payment_hash",
          "value_msat",
          "fee_msat",
          "creation_time_ns"
        ],
        "type": "object",
        "properties": {
          "payment_hash": {
            "title": "Payment Hash",
            "type": "string",
            "description": "The payment hash"
          },
          "payment_preimage": {
            "title": "Payment Preimage",
            "type": "string",
            "description": "The payment preimage"
          },
          "value_msat": {
            "title": "Value Msat",
            "type": "integer",
            "description": "The value of the payment in milli-satoshis"
          },
          "payment_request": {
            "title": "Payment Request",
            "type": "string",
            "description": "The optional payment request being fulfilled."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "description": "The status of the payment.",
            "default": "unknown"
          },
          "fee_msat": {
            "title": "Fee Msat",
            "type": "integer",
            "description": "The fee paid for this payment in msat"
          },
          "creation_time_ns": {
            "title": "Creation Time Ns",
            "type": "integer",
            "description": "The time in UNIX nanoseconds at which the payment was created."
          },
          "htlcs": {
            "title": "Htlcs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTLCAttempt"
            },
            "description": "The HTLCs made in attempt to settle the payment.",
            "default": []
          },
          "payment_index": {
            "title": "Payment Index",
            "type": "integer",
            "description": "The payment index. Only set with LND, 0 otherwise.",
            "default": 0
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The payment label. Only set with CLN, empty otherwise.",
            "default": ""
          },
          "failure_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentFailureReason"
              }
            ],
            "description": "The failure reason",
            "default": "FAILURE_REASON_NONE"
          }
        }
      },
      "PaymentFailureReason": {
        "title": "PaymentFailureReason",
        "enum": [
          "FAILURE_REASON_NONE",
          "FAILURE_REASON_TIMEOUT",
          "FAILURE_REASON_NO_ROUTE",
          "FAILURE_REASON_ERROR",
          "FAILURE_REASON_INCORRECT_PAYMENT_DETAILS",
          "FAILURE_REASON_INSUFFICIENT_BALANCE"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PaymentRequest": {
        "title": "PaymentRequest",
        "required": [
          "destination",
          "payment_hash",
          "timestamp",
          "expiry",
          "description",
          "cltv_expiry"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "title": "Destination",
            "type": "string"
          },
          "payment_hash": {
            "title": "Payment Hash",
            "type": "string"
          },
          "num_satoshis": {
            "title": "Num Satoshis",
            "type": "integer",
            "description": "Deprecated. User num_msat instead"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "integer"
          },
          "expiry": {
            "title": "Expiry",
            "type": "integer"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "description_hash": {
            "title": "Description Hash",
            "type": "string"
          },
          "fallback_addr": {
            "title": "Fallback Addr",
            "type": "string"
          },
          "cltv_expiry": {
            "title": "Cltv Expiry",
            "type": "integer"
          },
          "route_hints": {
            "title": "Route Hints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteHint"
            },
            "description": "A list of [HopHint] for the RouteHint",
            "default": []
          },
          "payment_addr": {
            "title": "Payment Addr",
            "type": "string",
            "description": "The payment address in hex format",
            "default": ""
          },
          "num_msat": {
            "title": "Num Msat",
            "type": "integer"
          },
          "features": {
            "title": "Features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturesEntry"
            },
            "default": []
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Optional requested currency of the payment. ",
            "default": ""
          }
        }
      },
      "PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "unknown",
          "in_flight",
          "succeeded",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RawDebugLogData": {
        "title": "RawDebugLogData",
        "required": [
          "raw_data"
        ],
        "type": "object",
        "properties": {
          "raw_data": {
            "title": "Raw Data",
            "type": "string",
            "description": "The raw debug log text"
          },
          "github_issues_url": {
            "title": "Github Issues Url",
            "type": "string",
            "description": "Link to the Raspiblitz issue tracker",
            "default": "https://www.github.com/rootzoll/raspiblitz/issues"
          }
        }
      },
      "RawTransaction": {
        "title": "RawTransaction",
        "required": [
          "txid",
          "hash",
          "size",
          "vsize",
          "weight",
          "version",
          "locktime",
          "vin",
          "vout",
          "blockhash",
          "confirmations",
          "blocktime"
        ],
        "type": "object",
        "properties": {
          "in_active_chain": {
            "title": "In Active Chain",
            "type": "boolean",
            "description": "Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)"
          },
          "txid": {
            "title": "Txid",
            "type": "string",
            "description": "The transaction id (same as provided)"
          },
          "hash": {
            "title": "Hash",
            "type": "string",
            "description": "The transaction hash (differs from txid for witness transactions)"
          },
          "size": {
            "title": "Size",
            "type": "integer",
            "description": "The serialized transaction size"
          },
          "vsize": {
            "title": "Vsize",
            "type": "integer",
            "description": "The virtual transaction size (differs from size for witness transactions)"
          },
          "weight": {
            "title": "Weight",
            "type": "integer",
            "description": "The transaction's weight (between vsize*4 - 3 and vsize*4)"
          },
          "version": {
            "title": "Version",
            "type": "integer",
            "description": "The version"
          },
          "locktime": {
            "title": "Locktime",
            "type": "integer",
            "description": "The lock time"
          },
          "vin": {
            "title": "Vin",
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "The transaction's inputs"
          },
          "vout": {
            "title": "Vout",
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "The transaction's outputs"
          },
          "blockhash": {
            "title": "Blockhash",
            "type": "string",
            "description": "The block hash"
          },
          "confirmations": {
            "title": "Confirmations",
            "type": "integer",
            "description": "The number of confirmations"
          },
          "blocktime": {
            "title": "Blocktime",
            "type": "integer",
            "description": "The block time in seconds since epoch (Jan 1 1970 GMT)"
          }
        }
      },
      "Route": {
        "title": "Route",
        "required": [
          "total_time_lock",
          "total_fees",
          "total_amt",
          "hops",
          "total_fees_msat",
          "total_amt_msat",
          "custom_records"
        ],
        "type": "object",
        "properties": {
          "total_time_lock": {
            "title": "Total Time Lock",
            "type": "integer"
          },
          "total_fees": {
            "title": "Total Fees",
            "type": "integer"
          },
          "total_amt": {
            "title": "Total Amt",
            "type": "integer"
          },
          "hops": {
            "title": "Hops",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hop"
            }
          },
          "total_fees_msat": {
            "title": "Total Fees Msat",
            "type": "integer"
          },
          "total_amt_msat": {
            "title": "Total Amt Msat",
            "type": "integer"
          },
          "mpp_record": {
            "$ref": "#/components/schemas/MPPRecord"
          },
          "amp_record": {
            "$ref": "#/components/schemas/AMPRecord"
          },
          "custom_records": {
            "title": "Custom Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomRecordsEntry"
            }
          }
        }
      },
      "RouteHint": {
        "title": "RouteHint",
        "type": "object",
        "properties": {
          "hop_hints": {
            "title": "Hop Hints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HopHint"
            },
            "description": "A list of hop hints that when chained together can assist in reaching a specific destination.",
            "default": []
          }
        }
      },
      "SendCoinsInput": {
        "title": "SendCoinsInput",
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The base58 or bech32 encoded bitcoin address to send coins to on-chain"
          },
          "target_conf": {
            "title": "Target Conf",
            "type": "integer",
            "description": "The number of blocks that the transaction *should* confirm in, will be used for fee estimation"
          },
          "sat_per_vbyte": {
            "title": "Sat Per Vbyte",
            "type": "integer",
            "description": "A manual fee expressed in sat/vbyte that should be used when crafting the transaction (default: 0)"
          },
          "min_confs": {
            "title": "Min Confs",
            "type": "integer",
            "description": "The minimum number of confirmations each one of your outputs used for the transaction must satisfy",
            "default": 1
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "A label for the transaction. Ignored by CLN backend.",
            "default": ""
          },
          "send_all": {
            "title": "Send All",
            "type": "boolean",
            "description": "Send all available on-chain funds from the wallet. Will be executed `amount` is **0**",
            "default": false
          },
          "amount": {
            "title": "Amount",
            "minimum": 0.0,
            "type": "integer",
            "description": "The number of bitcoin denominated in satoshis to send. Must not be set when `send_all` is true.",
            "default": 0
          }
        }
      },
      "SendCoinsResponse": {
        "title": "SendCoinsResponse",
        "required": [
          "txid",
          "address",
          "amount"
        ],
        "type": "object",
        "properties": {
          "txid": {
            "title": "Txid",
            "type": "string",
            "description": "The transaction ID for this onchain payment"
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The base58 or bech32 encoded bitcoin address where the onchain funds where sent to"
          },
          "amount": {
            "title": "Amount",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "The number of bitcoin denominated in satoshis which where sent"
          },
          "fees": {
            "title": "Fees",
            "minimum": 0.0,
            "type": "integer",
            "description": "The number of bitcoin denominated in satoshis which where paid as fees"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The label used for the transaction. Ignored by CLN backend.",
            "default": ""
          }
        }
      },
      "SoftFork": {
        "title": "SoftFork",
        "required": [
          "name",
          "type",
          "active"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the softfork"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "One of \"buried\", \"bip9\""
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "True **if** the rules are enforced for the mempool and the next block"
          },
          "bip9": {
            "title": "Bip9",
            "allOf": [
              {
                "$ref": "#/components/schemas/Bip9Data"
              }
            ],
            "description": "Status of bip9 softforks(only for \"bip9\" type)"
          },
          "height": {
            "title": "Height",
            "type": "integer",
            "description": "Height of the first block which the rules are or will be enforced (only for `buried` type, or `bip9` type with `active` status)"
          }
        }
      },
      "SystemInfo": {
        "title": "SystemInfo",
        "required": [
          "color",
          "api_version",
          "ssh_address",
          "chain"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "title": "Alias",
            "type": "string",
            "description": "Name of the node (same as Lightning alias)",
            "default": ""
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color of the current node in hex code format"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/APIPlatform"
              }
            ],
            "description": "The platform this API is running on.",
            "default": "raspiblitz"
          },
          "platform_version": {
            "title": "Platform Version",
            "type": "string",
            "description": "The version of this platform",
            "default": ""
          },
          "api_version": {
            "title": "Api Version",
            "type": "string",
            "description": "Version of the API software on this system."
          },
          "tor_web_ui": {
            "title": "Tor Web Ui",
            "type": "string",
            "description": "WebUI TOR address",
            "default": ""
          },
          "tor_api": {
            "title": "Tor Api",
            "type": "string",
            "description": "API TOR address",
            "default": ""
          },
          "lan_web_ui": {
            "title": "Lan Web Ui",
            "type": "string",
            "description": "WebUI LAN address",
            "default": ""
          },
          "lan_api": {
            "title": "Lan Api",
            "type": "string",
            "description": "API LAN address",
            "default": ""
          },
          "ssh_address": {
            "title": "Ssh Address",
            "type": "string",
            "description": "Address to ssh into on local LAN (e.g. `ssh admin@192.168.1.28`"
          },
          "chain": {
            "title": "Chain",
            "type": "string",
            "description": "The current chain this node is connected to (mainnet, testnet or signet)"
          }
        }
      },
      "TxCategory": {
        "title": "TxCategory",
        "enum": [
          "onchain",
          "ln"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TxStatus": {
        "title": "TxStatus",
        "enum": [
          "unknown",
          "in_flight",
          "succeeded",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TxType": {
        "title": "TxType",
        "enum": [
          "unknown",
          "send",
          "receive"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UninstallData": {
        "title": "UninstallData",
        "type": "object",
        "properties": {
          "keepData": {
            "title": "Keepdata",
            "type": "boolean",
            "default": true
          }
        }
      },
      "UnlockWalletInput": {
        "title": "UnlockWalletInput",
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string",
            "description": "The wallet password"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "WalletBalance": {
        "title": "WalletBalance",
        "required": [
          "onchain_confirmed_balance",
          "onchain_total_balance",
          "onchain_unconfirmed_balance",
          "channel_local_balance",
          "channel_remote_balance",
          "channel_unsettled_local_balance",
          "channel_unsettled_remote_balance",
          "channel_pending_open_local_balance",
          "channel_pending_open_remote_balance"
        ],
        "type": "object",
        "properties": {
          "onchain_confirmed_balance": {
            "title": "Onchain Confirmed Balance",
            "type": "integer",
            "description": "Confirmed onchain balance (more than three confirmations) in sat"
          },
          "onchain_total_balance": {
            "title": "Onchain Total Balance",
            "type": "integer",
            "description": "Total combined onchain balance in sat"
          },
          "onchain_unconfirmed_balance": {
            "title": "Onchain Unconfirmed Balance",
            "type": "integer",
            "description": "Unconfirmed onchain balance (less than three confirmations) in sat"
          },
          "channel_local_balance": {
            "title": "Channel Local Balance",
            "type": "integer",
            "description": "Sum of channels local balances in msat"
          },
          "channel_remote_balance": {
            "title": "Channel Remote Balance",
            "type": "integer",
            "description": "Sum of channels remote balances in msat."
          },
          "channel_unsettled_local_balance": {
            "title": "Channel Unsettled Local Balance",
            "type": "integer",
            "description": "Sum of channels local unsettled balances in msat."
          },
          "channel_unsettled_remote_balance": {
            "title": "Channel Unsettled Remote Balance",
            "type": "integer",
            "description": "Sum of channels remote unsettled balances in msat."
          },
          "channel_pending_open_local_balance": {
            "title": "Channel Pending Open Local Balance",
            "type": "integer",
            "description": "Sum of channels pending local balances in msat."
          },
          "channel_pending_open_remote_balance": {
            "title": "Channel Pending Open Remote Balance",
            "type": "integer",
            "description": "Sum of channels pending remote balances in msat."
          }
        }
      }
    },
    "securitySchemes": {
      "JWTBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
